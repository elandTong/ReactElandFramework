{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\src\\\\widget\\\\ToolbarMenu.jsx\";\nimport React from 'react';\nimport '../assets/style/comp.toolbarmenu.scss';\nimport Config from '../config';\nimport Emit from '../utils/EventBus';\nimport Tool from '../utils/Tool';\n\nvar ToolbarMenu = /*#__PURE__*/function (_React$Component) {\n  _inherits(ToolbarMenu, _React$Component);\n\n  var _super = _createSuper(ToolbarMenu);\n\n  function ToolbarMenu(props) {\n    var _this;\n\n    _classCallCheck(this, ToolbarMenu);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      items: [{\n        key: 'light',\n        name: Config.LANGUAG_USE.lightmode\n      }, {\n        key: 'dark',\n        name: Config.LANGUAG_USE.darkmode\n      }, {\n        key: 'user',\n        name: Config.LANGUAG_USE.usermode\n      }],\n      currname: Config.getAppTheme()\n    };\n    _this.onBroadcast = _this.onBroadcast.bind(_assertThisInitialized(_this));\n    Emit.on(Config.GLOBAL_EVENT, _this.onBroadcast);\n    return _this;\n  }\n\n  _createClass(ToolbarMenu, [{\n    key: \"onBroadcast\",\n    value: function onBroadcast(data) {\n      if (data.type === Config.GLOBAL_EVENT_TYPE.STYLE_THEME_CHANGE) {\n        this.setState({\n          currname: data.name\n        });\n      }\n\n      console.error('toolbarmenu on global event for data', data);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Emit.remove(this.onBroadcast);\n    }\n  }, {\n    key: \"onItemClick\",\n    value: function onItemClick(item, key, e) {\n      var _name = this.state.items[key].key;\n      this.setState({\n        currname: _name\n      });\n\n      if (this.props.onItemClick) {\n        this.props.onItemClick(item, key, e);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _items_jsx = this.state.items.map(function (item, key) {\n        var _classname = item.key === _this2.state.currname ? 'comp-toolbarmenu-item-select' : 'comp-toolbarmenu-item-unsele';\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: key,\n          className: \"display-center comp-toolbarmenu-item \".concat(_classname),\n          onClick: function onClick(e) {\n            _this2.onItemClick(item, key, e);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }\n        }, \" \", item.name, \" \"));\n      });\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"display-column comp-toolbarmenu-root \".concat(this.props.className || ''),\n        style: this.props.style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      }, Tool.insertSplitline(_items_jsx));\n    }\n  }]);\n\n  return ToolbarMenu;\n}(React.Component);\n\nexport default ToolbarMenu;","map":{"version":3,"sources":["C:/Users/elandtong/Desktop/ReactElandFramework/src/widget/ToolbarMenu.jsx"],"names":["React","Config","Emit","Tool","ToolbarMenu","props","state","items","key","name","LANGUAG_USE","lightmode","darkmode","usermode","currname","getAppTheme","onBroadcast","bind","on","GLOBAL_EVENT","data","type","GLOBAL_EVENT_TYPE","STYLE_THEME_CHANGE","setState","console","error","remove","item","e","_name","onItemClick","_items_jsx","map","_classname","className","style","insertSplitline","Component"],"mappings":";;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,uCAAP;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,IAAP,MAAiB,eAAjB;;IAEMC,W;;;;;AACF,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,CAAC;AACJC,QAAAA,GAAG,EAAE,OADD;AAEJC,QAAAA,IAAI,EAAER,MAAM,CAACS,WAAP,CAAmBC;AAFrB,OAAD,EAGJ;AACCH,QAAAA,GAAG,EAAE,MADN;AAECC,QAAAA,IAAI,EAAER,MAAM,CAACS,WAAP,CAAmBE;AAF1B,OAHI,EAMJ;AACCJ,QAAAA,GAAG,EAAE,MADN;AAECC,QAAAA,IAAI,EAAER,MAAM,CAACS,WAAP,CAAmBG;AAF1B,OANI,CADE;AAWTC,MAAAA,QAAQ,EAAEb,MAAM,CAACc,WAAP;AAXD,KAAb;AAcA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,+BAAnB;AAEAf,IAAAA,IAAI,CAACgB,EAAL,CAAQjB,MAAM,CAACkB,YAAf,EAA6B,MAAKH,WAAlC;AAnBe;AAoBlB;;;;gCAEWI,I,EAAM;AACd,UAAIA,IAAI,CAACC,IAAL,KAAcpB,MAAM,CAACqB,iBAAP,CAAyBC,kBAA3C,EAA+D;AAC3D,aAAKC,QAAL,CAAc;AAAEV,UAAAA,QAAQ,EAAEM,IAAI,CAACX;AAAjB,SAAd;AACH;;AAEDgB,MAAAA,OAAO,CAACC,KAAR,CAAc,sCAAd,EAAsDN,IAAtD;AACH;;;wCAEmB,CACnB;;;2CAEsB;AACnBlB,MAAAA,IAAI,CAACyB,MAAL,CAAY,KAAKX,WAAjB;AACH;;;gCAEWY,I,EAAMpB,G,EAAKqB,C,EAAG;AACtB,UAAIC,KAAK,GAAG,KAAKxB,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,EAAsBA,GAAlC;AAEA,WAAKgB,QAAL,CAAc;AAAEV,QAAAA,QAAQ,EAAEgB;AAAZ,OAAd;;AAEA,UAAI,KAAKzB,KAAL,CAAW0B,WAAf,EAA4B;AACxB,aAAK1B,KAAL,CAAW0B,WAAX,CAAuBH,IAAvB,EAA6BpB,GAA7B,EAAkCqB,CAAlC;AACH;AACJ;;;6BAEQ;AAAA;;AACL,UAAIG,UAAU,GAAG,KAAK1B,KAAL,CAAWC,KAAX,CAAiB0B,GAAjB,CAAqB,UAACL,IAAD,EAAOpB,GAAP,EAAe;AACjD,YAAI0B,UAAU,GAAGN,IAAI,CAACpB,GAAL,KAAa,MAAI,CAACF,KAAL,CAAWQ,QAAxB,GAAmC,8BAAnC,GAAoE,8BAArF;;AAEA,4BACI;AAAK,UAAA,GAAG,EAAEN,GAAV;AAAe,UAAA,SAAS,iDAA0C0B,UAA1C,CAAxB;AAAgF,UAAA,OAAO,EAAE,iBAACL,CAAD,EAAO;AAC5F,YAAA,MAAI,CAACE,WAAL,CAAiBH,IAAjB,EAAuBpB,GAAvB,EAA4BqB,CAA5B;AACH,WAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAQD,IAAI,CAACnB,IAAb,MAHJ,CADJ;AAOH,OAVgB,CAAjB;;AAYA,0BACI;AAAK,QAAA,SAAS,iDAA0C,KAAKJ,KAAL,CAAW8B,SAAX,IAAwB,EAAlE,CAAd;AAAsF,QAAA,KAAK,EAAE,KAAK9B,KAAL,CAAW+B,KAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKjC,IAAI,CAACkC,eAAL,CAAqBL,UAArB,CADL,CADJ;AAKH;;;;EAlEqBhC,KAAK,CAACsC,S;;AAqEhC,eAAelC,WAAf","sourcesContent":["\r\nimport React from 'react'\r\nimport '../assets/style/comp.toolbarmenu.scss'\r\nimport Config from '../config'\r\nimport Emit from '../utils/EventBus'\r\nimport Tool from '../utils/Tool'\r\n\r\nclass ToolbarMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            items: [{\r\n                key: 'light',\r\n                name: Config.LANGUAG_USE.lightmode\r\n            }, {\r\n                key: 'dark',\r\n                name: Config.LANGUAG_USE.darkmode\r\n            }, {\r\n                key: 'user',\r\n                name: Config.LANGUAG_USE.usermode\r\n            }],\r\n            currname: Config.getAppTheme()\r\n        }\r\n\r\n        this.onBroadcast = this.onBroadcast.bind(this)\r\n\r\n        Emit.on(Config.GLOBAL_EVENT, this.onBroadcast)\r\n    }\r\n\r\n    onBroadcast(data) {\r\n        if (data.type === Config.GLOBAL_EVENT_TYPE.STYLE_THEME_CHANGE) {\r\n            this.setState({ currname: data.name })\r\n        }\r\n\r\n        console.error('toolbarmenu on global event for data', data)\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        Emit.remove(this.onBroadcast)\r\n    }\r\n\r\n    onItemClick(item, key, e) {\r\n        let _name = this.state.items[key].key\r\n\r\n        this.setState({ currname: _name })\r\n\r\n        if (this.props.onItemClick) {\r\n            this.props.onItemClick(item, key, e)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let _items_jsx = this.state.items.map((item, key) => {\r\n            let _classname = item.key === this.state.currname ? 'comp-toolbarmenu-item-select' : 'comp-toolbarmenu-item-unsele'\r\n\r\n            return (\r\n                <div key={key} className={`display-center comp-toolbarmenu-item ${_classname}`} onClick={(e) => {\r\n                    this.onItemClick(item, key, e)\r\n                }}>\r\n                    <span> {item.name} </span>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div className={`display-column comp-toolbarmenu-root ${this.props.className || ''}`} style={this.props.style}>\r\n                {Tool.insertSplitline(_items_jsx)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToolbarMenu\r\n"]},"metadata":{},"sourceType":"module"}