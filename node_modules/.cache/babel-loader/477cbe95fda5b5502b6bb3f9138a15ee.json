{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\src\\\\router\\\\BaseModal.jsx\";\nimport React from 'react';\nimport Config from '../config';\nimport Emit from '../utils/EventBus';\nimport Frame from './Frame';\nimport APPContext from '../APPContext';\n/**\r\n * @description: 基础modal视窗页面抽象类,覆盖该类方法时必须要调用父类方法\r\n * @author: Eland.Tong\r\n */\n\nvar BaseModal = /*#__PURE__*/function (_React$Component) {\n  _inherits(BaseModal, _React$Component);\n\n  var _super = _createSuper(BaseModal);\n\n  function BaseModal(props) {\n    var _this;\n\n    _classCallCheck(this, BaseModal);\n\n    _this = _super.call(this, props);\n    _this._modalFrame = null;\n    _this._router = null;\n    _this._initPame = {};\n    _this._indata = {};\n    _this._broadcastData = {};\n    _this.renderContent = _this.renderContent.bind(_assertThisInitialized(_this));\n    _this.onBroadcast = _this.onBroadcast.bind(_assertThisInitialized(_this));\n    _this._modalFrame = props.modal;\n    _this._router = props.router;\n    _this._initPame = props.initPame;\n    Emit.on(BaseModal._BASE_GLOBAL_THEME, _this.onBroadcast);\n\n    _this.onCreate(props);\n\n    return _this;\n  }\n\n  _createClass(BaseModal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.onStart();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Emit.remove(this.onBroadcast);\n      this.onStop();\n    } // ------ 生命周期回调方法 ------\n\n    /**\r\n     * @description: 组件创建回调\r\n     * @param {Object} props 外部入口参数\r\n     */\n\n  }, {\n    key: \"onCreate\",\n    value: function onCreate(props) {\n      console.warn('base modal on create!');\n    }\n    /**\r\n     * @description: 组件安装回调\r\n     */\n\n  }, {\n    key: \"onStart\",\n    value: function onStart() {\n      console.warn('base modal on start!');\n    }\n    /**\r\n     * @description: 组件恢复回调\r\n     */\n\n  }, {\n    key: \"onResume\",\n    value: function onResume() {\n      console.warn('base modal on resume!');\n    }\n    /**\r\n     * @description: 组件暂停回调\r\n     */\n\n  }, {\n    key: \"onPause\",\n    value: function onPause() {\n      console.warn('base modal on pause!');\n    }\n    /**\r\n     * @description: 组件卸载回调\r\n     */\n\n  }, {\n    key: \"onStop\",\n    value: function onStop() {\n      console.warn('base modal on stop!');\n    } // ------ 生命周期回调方法 ------\n\n    /**\r\n     * @description: 用于路由时数据传递,启动方调用,接收方覆盖\r\n     * @param {Object} data 数据对象\r\n     */\n\n  }, {\n    key: \"onData\",\n    value: function onData(data) {\n      this._indata = data;\n    }\n    /**\r\n     * @description: 全局广播接收回调\r\n     * 覆盖警告<!不建议子类覆盖该方法,请覆盖广播分支方法!>: 子类覆盖该方法 必须调用 父类该方法 以保证广播接收正常\r\n     * @param {Object} data 事件对象\r\n     */\n\n  }, {\n    key: \"onBroadcast\",\n    value: function onBroadcast() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this._broadcastData = data;\n\n      switch (data.type) {\n        case Config.GLOBAL_EVENT_TYPE.NATIVE_BACK_EVENT:\n          {\n            // 原生返回按钮点击广播\n            this.onNativeBack(this.isStackTop(), data);\n            break;\n          }\n\n        case Config.GLOBAL_EVENT_TYPE.STYLE_THEME_CHANGE:\n          {\n            // 主题变更广播\n            this.onAppThemeChange(data.name, data);\n            break;\n          }\n\n        default:\n          {\n            // 普通广播\n            this.onNotice(data);\n            break;\n          }\n      }\n    }\n    /**\r\n     * @description: 普通全局事件通知\r\n     * @param {Object} event 广播事件对象\r\n     */\n\n  }, {\n    key: \"onNotice\",\n    value: function onNotice(event) {\n      console.warn('base modal notice event!');\n    }\n    /**\r\n     * @description: app主题变更回调\r\n     * @param {String} name 主题名称\r\n     * @param {Object} event 广播事件对象\r\n     */\n\n  }, {\n    key: \"onAppThemeChange\",\n    value: function onAppThemeChange(name, event) {\n      console.warn('base modal app theme change event!');\n    }\n    /**\r\n     * @description: 原生返回事件,需要原生提供支持\r\n     * @param {Boolean} isStacktop 当前modal页面是否处于路由栈顶\r\n     * @param {Object} event 广播事件对象\r\n     */\n\n  }, {\n    key: \"onNativeBack\",\n    value: function onNativeBack(isStacktop, event) {\n      console.warn('base modal native back event!');\n    }\n    /**\r\n     * @description: 在内置页面池内导航\r\n     * @param {String} name 路径\r\n     * @param {Object} data 跳转数据\r\n     * @param {Function} handle 页面处理器\r\n     */\n\n  }, {\n    key: \"navigationScreen\",\n    value: function navigationScreen(name, data, handle) {\n      if (this._router instanceof Frame) {\n        this._router.navigationScreen(name, data, handle);\n      }\n    }\n    /**\r\n     * @description: 意图页面导航\r\n     * @param {Object} intent 意图对象 {\r\n          component: null,\r\n          path: null,\r\n          opts: {props:{}}\r\n     * }\r\n     * @param {Object} data 跳转数据\r\n     * @param {Function} handle 页面处理器\r\n     */\n\n  }, {\n    key: \"startScreen\",\n    value: function startScreen(intent, data, handle) {\n      if (this._router instanceof Frame) {\n        this._router.startScreen(intent, data, handle);\n      }\n    }\n    /**\r\n     * @description: 在内置视窗池内导航\r\n     * @param {String} name 路径\r\n     * @param {Object} data 跳转数据\r\n     * @param {Function} handle 视窗处理器\r\n     */\n\n  }, {\n    key: \"navigationModal\",\n    value: function navigationModal(name, data, handle) {\n      if (this._router instanceof Frame) {\n        this._router.navigationModal(name, data, handle);\n      }\n    }\n    /**\r\n     * @description: 意图视窗导航\r\n     * @param {Object} intent 意图对象 {\r\n          component: null,\r\n          path: null,\r\n          opts: {props:{}}\r\n     * } \r\n     * @param {Object} data 跳转数据\r\n     * @param {Function} handle 视窗处理器\r\n     */\n\n  }, {\n    key: \"startModal\",\n    value: function startModal(intent, data, handle) {\n      if (this._router instanceof Frame) {\n        this._router.startModal(intent, data, handle);\n      }\n    }\n    /**\r\n     * @description: 判断modal视窗是否处于路由栈顶部\r\n     * @param {Object} modal 视窗对象 或 CLASS \r\n     * @return: boole\r\n     */\n\n  }, {\n    key: \"isStackTop\",\n    value: function isStackTop(modal) {\n      if (this._router instanceof Frame) {\n        return this._router.isModalStackTop(modal || this);\n      }\n\n      return false;\n    }\n    /**\r\n     * @description: 关闭视窗并退栈\r\n     */\n\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      if (this._router instanceof Frame) {\n        this._router.finishModal(this._modalFrame);\n      }\n    }\n    /**\r\n     * @description: 发送广播\r\n     * @param {Object} data 广播对象\r\n     * @return: bool 是否发送成功\r\n     */\n\n  }, {\n    key: \"sendBroadcast\",\n    value: function sendBroadcast(data) {\n      return Emit.exe(Object.assign(data, {\n        theme: BaseModal._BASE_GLOBAL_THEME\n      }));\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent(_ref) {\n      var theme = _ref.theme,\n          language = _ref.language,\n          getapp = _ref.getapp;\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(APPContext.Consumer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }\n      }, this.renderContent);\n    }\n  }]);\n\n  return BaseModal;\n}(React.Component);\n\nBaseModal._BASE_GLOBAL_THEME = Config.GLOBAL_EVENT;\nexport default BaseModal;","map":{"version":3,"sources":["C:/Users/elandtong/Desktop/ReactElandFramework/src/router/BaseModal.jsx"],"names":["React","Config","Emit","Frame","APPContext","BaseModal","props","_modalFrame","_router","_initPame","_indata","_broadcastData","renderContent","bind","onBroadcast","modal","router","initPame","on","_BASE_GLOBAL_THEME","onCreate","onStart","remove","onStop","console","warn","data","type","GLOBAL_EVENT_TYPE","NATIVE_BACK_EVENT","onNativeBack","isStackTop","STYLE_THEME_CHANGE","onAppThemeChange","name","onNotice","event","isStacktop","handle","navigationScreen","intent","startScreen","navigationModal","startModal","isModalStackTop","finishModal","exe","Object","assign","theme","language","getapp","Component","GLOBAL_EVENT"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Config from '../config';\r\nimport Emit from '../utils/EventBus';\r\nimport Frame from './Frame';\r\nimport APPContext from '../APPContext';\r\n\r\n/**\r\n * @description: 基础modal视窗页面抽象类,覆盖该类方法时必须要调用父类方法\r\n * @author: Eland.Tong\r\n */\r\n\r\nclass BaseModal extends React.Component {\r\n    static _BASE_GLOBAL_THEME = Config.GLOBAL_EVENT\r\n\r\n    _modalFrame = null\r\n\r\n    _router = null\r\n\r\n    _initPame = {}\r\n\r\n    _indata = {}\r\n\r\n    _broadcastData = {}\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.renderContent = this.renderContent.bind(this)\r\n        this.onBroadcast = this.onBroadcast.bind(this)\r\n\r\n        this._modalFrame = props.modal\r\n\r\n        this._router = props.router\r\n\r\n        this._initPame = props.initPame\r\n\r\n\r\n        Emit.on(BaseModal._BASE_GLOBAL_THEME, this.onBroadcast)\r\n\r\n        this.onCreate(props)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.onStart()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        Emit.remove(this.onBroadcast)\r\n\r\n        this.onStop()\r\n    }\r\n\r\n    // ------ 生命周期回调方法 ------\r\n\r\n    /**\r\n     * @description: 组件创建回调\r\n     * @param {Object} props 外部入口参数\r\n     */\r\n    onCreate(props) {\r\n        console.warn('base modal on create!')\r\n    }\r\n\r\n    /**\r\n     * @description: 组件安装回调\r\n     */\r\n    onStart() {\r\n        console.warn('base modal on start!')\r\n    }\r\n\r\n    /**\r\n     * @description: 组件恢复回调\r\n     */\r\n    onResume() {\r\n        console.warn('base modal on resume!')\r\n    }\r\n\r\n    /**\r\n     * @description: 组件暂停回调\r\n     */\r\n    onPause() {\r\n        console.warn('base modal on pause!')\r\n    }\r\n\r\n    /**\r\n     * @description: 组件卸载回调\r\n     */\r\n    onStop() {\r\n        console.warn('base modal on stop!')\r\n    }\r\n\r\n    // ------ 生命周期回调方法 ------\r\n\r\n    /**\r\n     * @description: 用于路由时数据传递,启动方调用,接收方覆盖\r\n     * @param {Object} data 数据对象\r\n     */\r\n    onData(data) {\r\n        this._indata = data\r\n    }\r\n\r\n    /**\r\n     * @description: 全局广播接收回调\r\n     * 覆盖警告<!不建议子类覆盖该方法,请覆盖广播分支方法!>: 子类覆盖该方法 必须调用 父类该方法 以保证广播接收正常\r\n     * @param {Object} data 事件对象\r\n     */\r\n    onBroadcast(data = {}) {\r\n        this._broadcastData = data\r\n\r\n        switch (data.type) {\r\n            case Config.GLOBAL_EVENT_TYPE.NATIVE_BACK_EVENT: { // 原生返回按钮点击广播\r\n                this.onNativeBack(this.isStackTop(), data)\r\n                break\r\n            }\r\n            case Config.GLOBAL_EVENT_TYPE.STYLE_THEME_CHANGE: { // 主题变更广播\r\n                this.onAppThemeChange(data.name, data)\r\n                break\r\n            }\r\n            default: { // 普通广播\r\n                this.onNotice(data)\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 普通全局事件通知\r\n     * @param {Object} event 广播事件对象\r\n     */\r\n    onNotice(event) {\r\n        console.warn('base modal notice event!')\r\n    }\r\n\r\n    /**\r\n     * @description: app主题变更回调\r\n     * @param {String} name 主题名称\r\n     * @param {Object} event 广播事件对象\r\n     */\r\n    onAppThemeChange(name, event) {\r\n        console.warn('base modal app theme change event!')\r\n    }\r\n\r\n    /**\r\n     * @description: 原生返回事件,需要原生提供支持\r\n     * @param {Boolean} isStacktop 当前modal页面是否处于路由栈顶\r\n     * @param {Object} event 广播事件对象\r\n     */\r\n    onNativeBack(isStacktop, event) {\r\n        console.warn('base modal native back event!')\r\n    }\r\n\r\n    /**\r\n     * @description: 在内置页面池内导航\r\n     * @param {String} name 路径\r\n     * @param {Object} data 跳转数据\r\n     * @param {Function} handle 页面处理器\r\n     */\r\n    navigationScreen(name, data, handle) {\r\n        if (this._router instanceof Frame) {\r\n            this._router.navigationScreen(name, data, handle)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 意图页面导航\r\n     * @param {Object} intent 意图对象 {\r\n          component: null,\r\n          path: null,\r\n          opts: {props:{}}\r\n     * }\r\n     * @param {Object} data 跳转数据\r\n     * @param {Function} handle 页面处理器\r\n     */\r\n    startScreen(intent, data, handle) {\r\n        if (this._router instanceof Frame) {\r\n            this._router.startScreen(intent, data, handle)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 在内置视窗池内导航\r\n     * @param {String} name 路径\r\n     * @param {Object} data 跳转数据\r\n     * @param {Function} handle 视窗处理器\r\n     */\r\n    navigationModal(name, data, handle) {\r\n        if (this._router instanceof Frame) {\r\n            this._router.navigationModal(name, data, handle)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 意图视窗导航\r\n     * @param {Object} intent 意图对象 {\r\n          component: null,\r\n          path: null,\r\n          opts: {props:{}}\r\n     * } \r\n     * @param {Object} data 跳转数据\r\n     * @param {Function} handle 视窗处理器\r\n     */\r\n    startModal(intent, data, handle) {\r\n        if (this._router instanceof Frame) {\r\n            this._router.startModal(intent, data, handle)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 判断modal视窗是否处于路由栈顶部\r\n     * @param {Object} modal 视窗对象 或 CLASS \r\n     * @return: boole\r\n     */\r\n    isStackTop(modal) {\r\n        if (this._router instanceof Frame) {\r\n            return this._router.isModalStackTop(modal || this)\r\n        }\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * @description: 关闭视窗并退栈\r\n     */\r\n    finish() {\r\n        if (this._router instanceof Frame) {\r\n            this._router.finishModal(this._modalFrame)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 发送广播\r\n     * @param {Object} data 广播对象\r\n     * @return: bool 是否发送成功\r\n     */\r\n    sendBroadcast(data) {\r\n        return Emit.exe(Object.assign(data, {\r\n            theme: BaseModal._BASE_GLOBAL_THEME\r\n        }))\r\n    }\r\n\r\n    renderContent({ theme, language, getapp }) {\r\n        return null\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <APPContext.Consumer>\r\n                {this.renderContent}\r\n            </APPContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BaseModal\r\n"]},"metadata":{},"sourceType":"module"}