{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\src\\\\router\\\\Frame.jsx\";\nimport React from 'react';\nimport CSSTransitionGroup from 'react-addons-css-transition-group/index';\nimport Tool from '../utils/Tool';\nimport BaseModal from './BaseModal';\nimport BaseScreen from './BaseScreen';\nimport ModalFrame from './ModalFrame';\nimport ScreenFrame from './ScreenFrame';\n/**\r\n * @description: 基础SPA路由框架,该框架是基于DOM结构的实时渲染控制路由!\r\n * @author: Eland.Tong\r\n */\n\nvar ScreenAnimation = /*#__PURE__*/function (_React$Component) {\n  _inherits(ScreenAnimation, _React$Component);\n\n  var _super = _createSuper(ScreenAnimation);\n\n  function ScreenAnimation(props) {\n    var _this;\n\n    _classCallCheck(this, ScreenAnimation);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(ScreenAnimation, [{\n    key: \"render\",\n    value: function render() {\n      if (this.props.status === false) {\n        return this.props.children;\n      } else {\n        return /*#__PURE__*/React.createElement(CSSTransitionGroup, {\n          transitionName: \"\".concat(this.props.className || 'screen-router'),\n          transitionEnterTimeout: 200,\n          transitionLeaveTimeout: 200,\n          transitionAppear: true,\n          transitionAppearTimeout: 200,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 17\n          }\n        }, this.props.children);\n      }\n    }\n  }]);\n\n  return ScreenAnimation;\n}(React.Component);\n\nvar ModalAnimation = /*#__PURE__*/function (_React$Component2) {\n  _inherits(ModalAnimation, _React$Component2);\n\n  var _super2 = _createSuper(ModalAnimation);\n\n  function ModalAnimation(props) {\n    var _this2;\n\n    _classCallCheck(this, ModalAnimation);\n\n    _this2 = _super2.call(this, props);\n    _this2.state = {};\n    return _this2;\n  }\n\n  _createClass(ModalAnimation, [{\n    key: \"render\",\n    value: function render() {\n      if (this.props.status === false) {\n        return this.props.children;\n      } else {\n        return /*#__PURE__*/React.createElement(CSSTransitionGroup, {\n          transitionName: \"\".concat(this.props.className || 'example'),\n          transitionEnterTimeout: 200,\n          transitionLeaveTimeout: 200,\n          transitionAppear: true,\n          transitionAppearTimeout: 200,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }\n        }, this.props.children);\n      }\n    }\n  }]);\n\n  return ModalAnimation;\n}(React.Component);\n\nvar Frame = /*#__PURE__*/function (_React$Component3) {\n  _inherits(Frame, _React$Component3);\n\n  var _super3 = _createSuper(Frame);\n\n  /**\r\n   * @description: 初始化框架基础\r\n   * @param {Object} props 外部入口参数\r\n   */\n  function Frame(props) {\n    var _this3;\n\n    _classCallCheck(this, Frame);\n\n    _this3 = _super3.call(this, props);\n    _this3._param = {\n      screens: [],\n      modals: []\n    };\n    _this3._keep_param = {\n      screens: [],\n      modals: []\n    };\n    _this3._screenZIndex = 100;\n    _this3._modalZIndex = 100;\n    _this3.__stack_temp = {\n      screen: null,\n      modal: null,\n      compref: null,\n      zIndex: 0,\n      compHandle: null\n    };\n\n    _this3.updateOpts();\n\n    _this3.state = {\n      index: {\n        path: props.index\n      },\n      screenStack: [],\n      modalStack: []\n    };\n\n    var _index = _this3.getScreenIntent(_this3.props.index);\n\n    if (_index) {\n      // 初始化页面\n      _this3.state.screenStack.push(Object.assign({\n        screen: null,\n        compref: null,\n        zIndex: ++_this3._screenZIndex,\n        compHandle: function compHandle(comp) {\n          if (comp instanceof BaseScreen) {\n            comp.onResume();\n            comp.onData({\n              message: 'This data is constructed by the routing framework',\n              date: new Date().getTime()\n            });\n          }\n        }\n      }, _index));\n    } else {\n      console.error('Serious error! The homepage path you specified is not in the routing pool!');\n    }\n\n    return _this3;\n  }\n  /**\r\n   * @description: 更新 props 参数到本地 _param 对象 并过滤非法项\r\n   */\n\n\n  _createClass(Frame, [{\n    key: \"updateOpts\",\n    value: function updateOpts() {\n      this._param = Tool.structureAssignment(Object.assign({}, this._keep_param), this.props.param); // 过滤非法项\n\n      this._param.screens = this._param.screens.filter(function (item) {\n        return Object.getPrototypeOf(item.component) === BaseScreen && !Tool.isEmpty(item.path);\n      });\n      this._param.modals = this._param.modals.filter(function (item) {\n        return Object.getPrototypeOf(item.component) === BaseModal && !Tool.isEmpty(item.path);\n      });\n    }\n    /**\r\n     * @description: 框架安装\r\n     */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n    /**\r\n     * @description: 框架卸载\r\n     */\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n    /**\r\n     * @description: 退回首页\r\n     * @param {Function} 内容组件回调\r\n     */\n\n  }, {\n    key: \"gohome\",\n    value: function gohome(handle) {\n      var _this4 = this;\n\n      var _stack = this.state.screenStack;\n      _stack = _stack.filter(function (item) {\n        if (item.path === _this4.props.index) {\n          item.compHandle = function (comp) {\n            if (comp instanceof BaseScreen) {\n              comp.onResume();\n            }\n\n            if (handle) {\n              handle(comp);\n            }\n          };\n\n          return true;\n        } else {\n          if (item.compref instanceof BaseScreen) {\n            item.compref.onPause();\n          }\n\n          return false;\n        }\n      }); // eslint-disable-next-line react/no-direct-mutation-state\n\n      this.state.screenStack = _stack;\n      this.setState({\n        screenStack: _stack\n      });\n    }\n    /**\r\n     * @description: screen页面退栈, router frame finish screen failure! You have to keep a page screen\r\n     * @param {Object} screen BaseScreen 对象\r\n     */\n\n  }, {\n    key: \"finishScreen\",\n    value: function finishScreen(screen) {\n      if (screen == null || this.state.screenStack.length <= 1) {\n        return;\n      }\n\n      var _stack = this.state.screenStack;\n      var _last = _stack[_stack.length - 1];\n\n      if (screen !== _last.screen) {\n        return;\n      }\n\n      if (_last.compref instanceof BaseScreen) {\n        _last.compref.onPause();\n      }\n\n      _stack.splice(_stack.length - 1, 1);\n\n      _last = _stack[_stack.length - 1];\n\n      if (_last.compref instanceof BaseScreen) {\n        _last.compref.onResume();\n      }\n\n      this.setState({\n        screenStack: _stack\n      });\n    }\n    /**\r\n     * @description: screen页面路由池导航\r\n     * @param {String} path 路径\r\n     * @param {Object} data 跳转数据\r\n     * @param {Function} handle 内容组件处理器\r\n     */\n\n  }, {\n    key: \"navigationScreen\",\n    value: function navigationScreen(path, data, handle) {\n      var _intent = this.getScreenIntent(path);\n\n      if (_intent) {\n        this.startScreen(_intent, data, handle);\n      } else {\n        console.error('No corresponding entry found in screen routing pool!');\n      }\n    }\n    /**\r\n     * @description: 意图启动screen页面\r\n     * @param {Object} intent 意图对象\r\n     * @param {Object} data 跳转数据\r\n     * @param {Function} handle 内容组件处理器\r\n     */\n\n  }, {\n    key: \"startScreen\",\n    value: function startScreen() {\n      var intent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        component: null,\n        path: null,\n        opts: {\n          props: {}\n        }\n      };\n      var data = arguments.length > 1 ? arguments[1] : undefined;\n      var handle = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (!intent || !intent.component || Object.getPrototypeOf(intent.component) !== BaseScreen || Tool.isEmpty(intent.path)) {\n        console.error('router frame start screen error please check the configuration parameters!');\n        return;\n      }\n\n      if (intent.path === this.props.index) {\n        // 如果导航到首页则退栈\n        this.gohome(handle);\n        return;\n      }\n\n      var _stack = this.state.screenStack;\n\n      if (_stack.length > 0) {\n        var _last = _stack[_stack.length - 1];\n\n        if (_last.path === intent.path) {\n          return;\n        }\n\n        if (_last.compref instanceof BaseScreen) {\n          _last.pauseHandle = null;\n\n          _last.compref.onPause();\n        } else {\n          _last.pauseHandle = function (comp) {\n            // 消耗处理器\n            if (comp instanceof BaseScreen) {\n              comp.onPause();\n            }\n          };\n        }\n      }\n\n      _stack = _stack.filter(function (_it) {\n        return !(_it.path === intent.path);\n      }); // 过滤重复项\n\n      _stack.push(Object.assign({\n        screen: null,\n        compref: null,\n        zIndex: ++this._screenZIndex,\n        pauseHandle: null,\n        compHandle: function compHandle(comp) {\n          if (comp instanceof BaseScreen) {\n            comp.onResume();\n            comp.onData(data || {});\n          }\n\n          if (this.pauseHandle) {\n            this.pauseHandle(comp); // 执行暂停处理器\n          }\n\n          this.pauseHandle = null;\n\n          if (handle) {\n            handle(comp);\n          }\n        }\n      }, intent)); // eslint-disable-next-line react/no-direct-mutation-state\n\n\n      this.state.screenStack = _stack;\n      this.setState({\n        screenStack: _stack\n      });\n    }\n    /**\r\n     * @description: 获取screen页面内容组件对象\r\n     * @param {String} path 路径 \r\n     * @return: 内容组件对象\r\n     */\n\n  }, {\n    key: \"getScreen\",\n    value: function getScreen(path) {\n      var _iterator = _createForOfIteratorHelper(this._param.screens),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var it = _step.value;\n\n          if (it.path === path) {\n            return it.compref;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return null;\n    }\n    /**\r\n     * @description: 在screen页面路由池内获取意图\r\n     * @param {String} path 路径 \r\n     * @return: 意图对象\r\n     */\n\n  }, {\n    key: \"getScreenIntent\",\n    value: function getScreenIntent(path) {\n      var _iterator2 = _createForOfIteratorHelper(this._param.screens),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n\n          if (item.path === path) {\n            return item;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return null;\n    }\n    /**\r\n     * @description: 判断screen页面是否处于栈顶\r\n     * @param {Object} screen BaseScreen对象 或 CLASS \r\n     * @return: boole\r\n     */\n\n  }, {\n    key: \"isScreenStackTop\",\n    value: function isScreenStackTop(screen) {\n      if (this.state.screenStack.length < 1) {\n        return false;\n      }\n\n      var _top = this.state.screenStack[this.state.screenStack.length - 1];\n\n      if (screen instanceof _top.component || screen === _top.component) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * @description: modal视窗退栈\r\n     * @param {Object} modal BaseModal对象\r\n     */\n\n  }, {\n    key: \"finishModal\",\n    value: function finishModal(modal) {\n      if (modal == null || this.state.modalStack.length < 1) {\n        return;\n      }\n\n      var _stack = this.state.modalStack;\n      var _last = _stack[_stack.length - 1];\n\n      if (modal !== _last.modal) {\n        return;\n      }\n\n      if (_last.compref instanceof BaseModal) {\n        _last.compref.onPause();\n      }\n\n      _stack.splice(_stack.length - 1, 1);\n\n      if (_stack.length > 0) {\n        _last = _stack[_stack.length - 1];\n\n        if (_last.compref instanceof BaseModal) {\n          _last.compref.onResume();\n        }\n      }\n\n      this.setState({\n        modalStack: _stack\n      });\n    }\n    /**\r\n     * @description: 在modal路由池内导航\r\n     * @param {String} path 路径\r\n     * @param {Object} data 跳转数据\r\n     * @param {Function} handle 内容组件处理器\r\n     */\n\n  }, {\n    key: \"navigationModal\",\n    value: function navigationModal(path, data, handle) {\n      var _intent = this.getModalIntent(path);\n\n      if (_intent) {\n        this.startModal(_intent, data, handle);\n      } else {\n        console.error('No corresponding entry found in modal routing pool!');\n      }\n    }\n    /**\r\n     * @description: 意图启动modal视窗\r\n     * @param {Object} intent 意图对象\r\n     * @param {Object} data 跳转数据\r\n     * @param {Function} handle 内容组件处理器\r\n     */\n\n  }, {\n    key: \"startModal\",\n    value: function startModal() {\n      var intent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        component: null,\n        path: null,\n        opts: {\n          props: {}\n        }\n      };\n      var data = arguments.length > 1 ? arguments[1] : undefined;\n      var handle = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (!intent || !intent.component || Object.getPrototypeOf(intent.component) !== BaseModal || Tool.isEmpty(intent.path)) {\n        console.error('router frame start modal error please check the configuration parameters!');\n        return;\n      }\n\n      var _stack = this.state.modalStack;\n\n      if (_stack.length > 0) {\n        var _last = _stack[_stack.length - 1];\n\n        if (_last.path === intent.path) {\n          return;\n        }\n\n        if (_last.compref instanceof BaseModal) {\n          _last.pauseHandle = null;\n\n          _last.compref.onPause();\n        } else {\n          _last.pauseHandle = function (comp) {\n            // 消耗处理器\n            if (comp instanceof BaseModal) {\n              comp.onPause();\n            }\n          };\n        }\n      }\n\n      _stack = _stack.filter(function (_it) {\n        return !(_it.path === intent.path);\n      }); // 过滤重复项\n\n      _stack.push(Object.assign({\n        modal: null,\n        compref: null,\n        zIndex: ++this._modalZIndex,\n        pauseHandle: null,\n        compHandle: function compHandle(comp) {\n          if (comp instanceof BaseModal) {\n            comp.onResume();\n            comp.onData(data || {});\n          }\n\n          if (this.pauseHandle) {\n            this.pauseHandle(comp); // 执行暂停处理器\n          }\n\n          this.pauseHandle = null;\n\n          if (handle) {\n            handle(comp);\n          }\n        }\n      }, intent)); // eslint-disable-next-line react/no-direct-mutation-state\n\n\n      this.state.modalStack = _stack;\n      this.setState({\n        modalStack: _stack\n      });\n    }\n    /**\r\n     * @description: 获取modal视窗内容组件对象\r\n     * @param {String} path 路径 \r\n     * @return: 内容组件对象\r\n     */\n\n  }, {\n    key: \"getModal\",\n    value: function getModal(path) {\n      var _iterator3 = _createForOfIteratorHelper(this._param.modals),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var it = _step3.value;\n\n          if (it.path === path) {\n            return it.compref;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return null;\n    }\n    /**\r\n     * @description: 在modal视窗路由池内获取意图\r\n     * @param {String} path 路径 \r\n     * @return: modal视窗意图\r\n     */\n\n  }, {\n    key: \"getModalIntent\",\n    value: function getModalIntent(path) {\n      var _iterator4 = _createForOfIteratorHelper(this._param.modals),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var item = _step4.value;\n\n          if (item.path === path) {\n            return item;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return null;\n    }\n    /**\r\n     * @description: 判断modal视窗是否处于栈顶\r\n     * @param {Object} modal modal 视图对象 或 CLASS \r\n     * @return: boole\r\n     */\n\n  }, {\n    key: \"isModalStackTop\",\n    value: function isModalStackTop(modal) {\n      if (this.state.modalStack.length < 1) {\n        return false;\n      }\n\n      var _top = this.state.modalStack[this.state.modalStack.length - 1];\n\n      if (modal instanceof _top.component || modal === _top.component) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * @description: 框架开始渲染\r\n     * @return: JSX\r\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      this.updateOpts();\n      var screens = this.state.screenStack.filter(function (item) {\n        return item.component ? true : false;\n      }).map(function (item, key) {\n        return /*#__PURE__*/React.createElement(ScreenFrame, {\n          key: key,\n          router: _this5,\n          component: item.component,\n          initPame: item.opts.props,\n          zIndex: item.zIndex,\n          compHandle: function compHandle(comp) {\n            item.compref = comp;\n\n            if (item.compHandle) {\n              item.compHandle(comp);\n            }\n\n            item.compHandle = null;\n          },\n          ref: function ref(comp) {\n            item.screen = comp;\n          },\n          __self: _this5,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 17\n          }\n        });\n      });\n      var modals = this.state.modalStack.filter(function (item) {\n        return item.component ? true : false;\n      }).map(function (item, key) {\n        return /*#__PURE__*/React.createElement(ModalFrame, {\n          key: key,\n          router: _this5,\n          component: item.component,\n          initPame: item.opts.props,\n          zIndex: item.zIndex,\n          compHandle: function compHandle(comp) {\n            item.compref = comp;\n\n            if (item.compHandle) {\n              item.compHandle(comp);\n            }\n\n            item.compHandle = null;\n          },\n          ref: function ref(comp) {\n            item.modal = comp;\n          },\n          __self: _this5,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 17\n          }\n        });\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: 'app',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: 'page-screen-root',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: 'page-screen-view',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(ScreenAnimation, {\n        className: this.props.classNameScreenAnimation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 25\n        }\n      }, screens))), /*#__PURE__*/React.createElement(\"div\", {\n        className: 'page-modal-root',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: 'page-modal-view',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(ModalAnimation, {\n        className: this.props.classNameModalAnimation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 25\n        }\n      }, modals))));\n    }\n  }]);\n\n  return Frame;\n}(React.Component);\n\nexport default Frame;","map":{"version":3,"sources":["C:/Users/elandtong/Desktop/ReactElandFramework/src/router/Frame.jsx"],"names":["React","CSSTransitionGroup","Tool","BaseModal","BaseScreen","ModalFrame","ScreenFrame","ScreenAnimation","props","state","status","children","className","Component","ModalAnimation","Frame","_param","screens","modals","_keep_param","_screenZIndex","_modalZIndex","__stack_temp","screen","modal","compref","zIndex","compHandle","updateOpts","index","path","screenStack","modalStack","_index","getScreenIntent","push","Object","assign","comp","onResume","onData","message","date","Date","getTime","console","error","structureAssignment","param","filter","item","getPrototypeOf","component","isEmpty","handle","_stack","onPause","setState","length","_last","splice","data","_intent","startScreen","intent","opts","gohome","pauseHandle","_it","it","_top","getModalIntent","startModal","map","key","classNameScreenAnimation","classNameModalAnimation"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport CSSTransitionGroup from 'react-addons-css-transition-group/index';\r\nimport Tool from '../utils/Tool';\r\nimport BaseModal from './BaseModal';\r\nimport BaseScreen from './BaseScreen';\r\nimport ModalFrame from './ModalFrame';\r\nimport ScreenFrame from './ScreenFrame';\r\n\r\n/**\r\n * @description: 基础SPA路由框架,该框架是基于DOM结构的实时渲染控制路由!\r\n * @author: Eland.Tong\r\n */\r\n\r\nclass ScreenAnimation extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.props.status === false) {\r\n            return (this.props.children)\r\n        } else {\r\n            return (\r\n                <CSSTransitionGroup transitionName={`${this.props.className || 'screen-router'}`}\r\n                    transitionEnterTimeout={200}\r\n                    transitionLeaveTimeout={200}\r\n                    transitionAppear={true}\r\n                    transitionAppearTimeout={200}>\r\n                    {this.props.children}\r\n                </CSSTransitionGroup>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nclass ModalAnimation extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.props.status === false) {\r\n            return (this.props.children)\r\n        } else {\r\n            return (\r\n                <CSSTransitionGroup transitionName={`${this.props.className || 'example'}`}\r\n                    transitionEnterTimeout={200}\r\n                    transitionLeaveTimeout={200}\r\n                    transitionAppear={true}\r\n                    transitionAppearTimeout={200}>\r\n                    {this.props.children}\r\n                </CSSTransitionGroup>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nclass Frame extends React.Component {\r\n    _param = {\r\n        screens: [],\r\n        modals: []\r\n    }\r\n\r\n    _keep_param = {\r\n        screens: [],\r\n        modals: []\r\n    }\r\n\r\n    _screenZIndex = 100\r\n\r\n    _modalZIndex = 100\r\n\r\n    __stack_temp = {\r\n        screen: null,\r\n        modal: null,\r\n        compref: null,\r\n        zIndex: 0,\r\n        compHandle: null\r\n    }\r\n\r\n    /**\r\n     * @description: 初始化框架基础\r\n     * @param {Object} props 外部入口参数\r\n     */\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.updateOpts()\r\n\r\n        this.state = {\r\n            index: {\r\n                path: props.index\r\n            },\r\n            screenStack: [],\r\n            modalStack: []\r\n        }\r\n\r\n        let _index = this.getScreenIntent(this.props.index)\r\n\r\n        if (_index) { // 初始化页面\r\n            this.state.screenStack.push(Object.assign({\r\n                screen: null,\r\n                compref: null,\r\n                zIndex: ++this._screenZIndex,\r\n                compHandle: (comp) => {\r\n                    if (comp instanceof BaseScreen) {\r\n                        comp.onResume()\r\n                        comp.onData({\r\n                            message: 'This data is constructed by the routing framework',\r\n                            date: new Date().getTime()\r\n                        })\r\n                    }\r\n                }\r\n            }, _index))\r\n        } else {\r\n            console.error('Serious error! The homepage path you specified is not in the routing pool!')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 更新 props 参数到本地 _param 对象 并过滤非法项\r\n     */\r\n    updateOpts() {\r\n        this._param = Tool.structureAssignment(Object.assign({}, this._keep_param), this.props.param)\r\n\r\n        // 过滤非法项\r\n        this._param.screens = this._param.screens.filter((item) => {\r\n            return Object.getPrototypeOf(item.component) === BaseScreen && !Tool.isEmpty(item.path)\r\n        })\r\n\r\n        this._param.modals = this._param.modals.filter((item) => {\r\n            return Object.getPrototypeOf(item.component) === BaseModal && !Tool.isEmpty(item.path)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @description: 框架安装\r\n     */\r\n    componentDidMount() {\r\n    }\r\n\r\n    /**\r\n     * @description: 框架卸载\r\n     */\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    /**\r\n     * @description: 退回首页\r\n     * @param {Function} 内容组件回调\r\n     */\r\n    gohome(handle) {\r\n        let _stack = this.state.screenStack\r\n\r\n        _stack = _stack.filter((item) => {\r\n            if (item.path === this.props.index) {\r\n                item.compHandle = (comp) => {\r\n                    if (comp instanceof BaseScreen) {\r\n                        comp.onResume()\r\n                    }\r\n\r\n                    if (handle) { handle(comp) }\r\n                }\r\n                return true\r\n            } else {\r\n                if (item.compref instanceof BaseScreen) {\r\n                    item.compref.onPause()\r\n                }\r\n                return false\r\n            }\r\n        })\r\n\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.screenStack = _stack\r\n\r\n        this.setState({ screenStack: _stack })\r\n    }\r\n\r\n    /**\r\n     * @description: screen页面退栈, router frame finish screen failure! You have to keep a page screen\r\n     * @param {Object} screen BaseScreen 对象\r\n     */\r\n    finishScreen(screen) {\r\n        if (screen == null || this.state.screenStack.length <= 1) { return }\r\n\r\n        let _stack = this.state.screenStack\r\n\r\n        let _last = _stack[_stack.length - 1]\r\n\r\n        if (screen !== _last.screen) { return }\r\n\r\n        if (_last.compref instanceof BaseScreen) {\r\n            _last.compref.onPause()\r\n        }\r\n\r\n        _stack.splice(_stack.length - 1, 1)\r\n\r\n        _last = _stack[_stack.length - 1]\r\n\r\n        if (_last.compref instanceof BaseScreen) {\r\n            _last.compref.onResume()\r\n        }\r\n\r\n        this.setState({ screenStack: _stack })\r\n    }\r\n\r\n    /**\r\n     * @description: screen页面路由池导航\r\n     * @param {String} path 路径\r\n     * @param {Object} data 跳转数据\r\n     * @param {Function} handle 内容组件处理器\r\n     */\r\n    navigationScreen(path, data, handle) {\r\n        let _intent = this.getScreenIntent(path)\r\n\r\n        if (_intent) {\r\n            this.startScreen(_intent, data, handle)\r\n        } else {\r\n            console.error('No corresponding entry found in screen routing pool!')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 意图启动screen页面\r\n     * @param {Object} intent 意图对象\r\n     * @param {Object} data 跳转数据\r\n     * @param {Function} handle 内容组件处理器\r\n     */\r\n    startScreen(intent = {\r\n        component: null,\r\n        path: null,\r\n        opts: { props: {} }\r\n    }, data, handle) {\r\n        if (!intent || !intent.component\r\n            || Object.getPrototypeOf(intent.component) !== BaseScreen\r\n            || Tool.isEmpty(intent.path)) {\r\n            console.error('router frame start screen error please check the configuration parameters!')\r\n\r\n            return\r\n        }\r\n\r\n        if (intent.path === this.props.index) { // 如果导航到首页则退栈\r\n            this.gohome(handle)\r\n            return\r\n        }\r\n\r\n        let _stack = this.state.screenStack\r\n\r\n        if (_stack.length > 0) {\r\n            let _last = _stack[_stack.length - 1]\r\n\r\n            if (_last.path === intent.path) {\r\n                return\r\n            }\r\n\r\n            if (_last.compref instanceof BaseScreen) {\r\n                _last.pauseHandle = null\r\n\r\n                _last.compref.onPause()\r\n            } else {\r\n                _last.pauseHandle = function (comp) { // 消耗处理器\r\n                    if (comp instanceof BaseScreen) {\r\n                        comp.onPause()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        _stack = _stack.filter((_it) => { return !(_it.path === intent.path) }) // 过滤重复项\r\n\r\n        _stack.push(Object.assign({\r\n            screen: null,\r\n            compref: null,\r\n            zIndex: ++this._screenZIndex,\r\n            pauseHandle: null,\r\n            compHandle: function (comp) {\r\n                if (comp instanceof BaseScreen) {\r\n                    comp.onResume()\r\n\r\n                    comp.onData(data || {})\r\n                }\r\n\r\n                if (this.pauseHandle) {\r\n                    this.pauseHandle(comp) // 执行暂停处理器\r\n                }\r\n                this.pauseHandle = null\r\n\r\n                if (handle) { handle(comp) }\r\n            }\r\n        }, intent))\r\n\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.screenStack = _stack\r\n\r\n        this.setState({ screenStack: _stack })\r\n    }\r\n\r\n    /**\r\n     * @description: 获取screen页面内容组件对象\r\n     * @param {String} path 路径 \r\n     * @return: 内容组件对象\r\n     */\r\n    getScreen(path) {\r\n        for (let it of this._param.screens) {\r\n            if (it.path === path) { return it.compref }\r\n        }\r\n\r\n        return null\r\n    }\r\n\r\n    /**\r\n     * @description: 在screen页面路由池内获取意图\r\n     * @param {String} path 路径 \r\n     * @return: 意图对象\r\n     */\r\n    getScreenIntent(path) {\r\n        for (let item of this._param.screens) {\r\n            if (item.path === path) {\r\n                return item\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    /**\r\n     * @description: 判断screen页面是否处于栈顶\r\n     * @param {Object} screen BaseScreen对象 或 CLASS \r\n     * @return: boole\r\n     */\r\n    isScreenStackTop(screen) {\r\n        if (this.state.screenStack.length < 1) {\r\n            return false\r\n        }\r\n\r\n        let _top = this.state.screenStack[this.state.screenStack.length - 1]\r\n\r\n        if (screen instanceof _top.component || screen === _top.component) {\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * @description: modal视窗退栈\r\n     * @param {Object} modal BaseModal对象\r\n     */\r\n    finishModal(modal) {\r\n        if (modal == null || this.state.modalStack.length < 1) { return }\r\n\r\n        let _stack = this.state.modalStack\r\n\r\n        let _last = _stack[_stack.length - 1]\r\n\r\n        if (modal !== _last.modal) { return }\r\n\r\n        if (_last.compref instanceof BaseModal) {\r\n            _last.compref.onPause()\r\n        }\r\n\r\n        _stack.splice(_stack.length - 1, 1)\r\n\r\n        if (_stack.length > 0) {\r\n            _last = _stack[_stack.length - 1]\r\n\r\n            if (_last.compref instanceof BaseModal) {\r\n                _last.compref.onResume()\r\n            }\r\n        }\r\n\r\n        this.setState({ modalStack: _stack })\r\n    }\r\n\r\n    /**\r\n     * @description: 在modal路由池内导航\r\n     * @param {String} path 路径\r\n     * @param {Object} data 跳转数据\r\n     * @param {Function} handle 内容组件处理器\r\n     */\r\n    navigationModal(path, data, handle) {\r\n        let _intent = this.getModalIntent(path)\r\n\r\n        if (_intent) {\r\n            this.startModal(_intent, data, handle)\r\n        } else {\r\n            console.error('No corresponding entry found in modal routing pool!')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 意图启动modal视窗\r\n     * @param {Object} intent 意图对象\r\n     * @param {Object} data 跳转数据\r\n     * @param {Function} handle 内容组件处理器\r\n     */\r\n    startModal(intent = {\r\n        component: null,\r\n        path: null,\r\n        opts: { props: {} }\r\n    }, data, handle) {\r\n        if (!intent || !intent.component\r\n            || Object.getPrototypeOf(intent.component) !== BaseModal\r\n            || Tool.isEmpty(intent.path)) {\r\n            console.error('router frame start modal error please check the configuration parameters!')\r\n\r\n            return\r\n        }\r\n\r\n        let _stack = this.state.modalStack\r\n\r\n        if (_stack.length > 0) {\r\n            let _last = _stack[_stack.length - 1]\r\n\r\n            if (_last.path === intent.path) {\r\n                return\r\n            }\r\n\r\n            if (_last.compref instanceof BaseModal) {\r\n                _last.pauseHandle = null\r\n\r\n                _last.compref.onPause()\r\n            } else {\r\n                _last.pauseHandle = function (comp) { // 消耗处理器\r\n                    if (comp instanceof BaseModal) {\r\n                        comp.onPause()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        _stack = _stack.filter((_it) => { return !(_it.path === intent.path) }) // 过滤重复项\r\n\r\n        _stack.push(Object.assign({\r\n            modal: null,\r\n            compref: null,\r\n            zIndex: ++this._modalZIndex,\r\n            pauseHandle: null,\r\n            compHandle: function (comp) {\r\n                if (comp instanceof BaseModal) {\r\n                    comp.onResume()\r\n\r\n                    comp.onData(data || {})\r\n                }\r\n\r\n                if (this.pauseHandle) {\r\n                    this.pauseHandle(comp) // 执行暂停处理器\r\n                }\r\n                this.pauseHandle = null\r\n\r\n                if (handle) { handle(comp) }\r\n            }\r\n        }, intent))\r\n\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.modalStack = _stack\r\n\r\n        this.setState({ modalStack: _stack })\r\n    }\r\n\r\n    /**\r\n     * @description: 获取modal视窗内容组件对象\r\n     * @param {String} path 路径 \r\n     * @return: 内容组件对象\r\n     */\r\n    getModal(path) {\r\n        for (let it of this._param.modals) {\r\n            if (it.path === path) { return it.compref }\r\n        }\r\n\r\n        return null\r\n    }\r\n\r\n    /**\r\n     * @description: 在modal视窗路由池内获取意图\r\n     * @param {String} path 路径 \r\n     * @return: modal视窗意图\r\n     */\r\n    getModalIntent(path) {\r\n        for (let item of this._param.modals) {\r\n            if (item.path === path) {\r\n                return item\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    /**\r\n     * @description: 判断modal视窗是否处于栈顶\r\n     * @param {Object} modal modal 视图对象 或 CLASS \r\n     * @return: boole\r\n     */\r\n    isModalStackTop(modal) {\r\n        if (this.state.modalStack.length < 1) {\r\n            return false\r\n        }\r\n\r\n        let _top = this.state.modalStack[this.state.modalStack.length - 1]\r\n\r\n        if (modal instanceof _top.component || modal === _top.component) {\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * @description: 框架开始渲染\r\n     * @return: JSX\r\n     */\r\n    render() {\r\n        this.updateOpts()\r\n\r\n        let screens = this.state.screenStack.filter((item) => {\r\n            return item.component ? true : false\r\n        }).map((item, key) => {\r\n            return (\r\n                <ScreenFrame key={key} router={this}\r\n                    component={item.component}\r\n\r\n                    initPame={item.opts.props}\r\n\r\n                    zIndex={item.zIndex}\r\n\r\n                    compHandle={(comp) => {\r\n                        item.compref = comp\r\n\r\n                        if (item.compHandle) {\r\n                            item.compHandle(comp)\r\n                        }\r\n                        item.compHandle = null\r\n                    }}\r\n\r\n                    ref={(comp) => {\r\n                        item.screen = comp\r\n                    }} />\r\n            )\r\n        })\r\n\r\n        let modals = this.state.modalStack.filter((item) => {\r\n            return item.component ? true : false\r\n        }).map((item, key) => {\r\n            return (\r\n                <ModalFrame key={key} router={this}\r\n                    component={item.component}\r\n\r\n                    initPame={item.opts.props}\r\n\r\n                    zIndex={item.zIndex}\r\n\r\n                    compHandle={(comp) => {\r\n                        item.compref = comp\r\n\r\n                        if (item.compHandle) {\r\n                            item.compHandle(comp)\r\n                        }\r\n                        item.compHandle = null\r\n                    }}\r\n\r\n                    ref={(comp) => {\r\n                        item.modal = comp\r\n                    }} />\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div className={'app'}>\r\n                {/* screen stack */}\r\n                <div className={'page-screen-root'}>\r\n                    <div className={'page-screen-view'}>\r\n                        <ScreenAnimation className={this.props.classNameScreenAnimation}>\r\n                            {screens}\r\n                        </ScreenAnimation>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* modal stack */}\r\n                <div className={'page-modal-root'}>\r\n                    <div className={'page-modal-view'}>\r\n                        <ModalAnimation className={this.props.classNameModalAnimation}>\r\n                            {modals}\r\n                        </ModalAnimation>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Frame\r\n"]},"metadata":{},"sourceType":"module"}