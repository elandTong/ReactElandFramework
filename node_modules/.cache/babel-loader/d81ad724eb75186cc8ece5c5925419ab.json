{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\elandtong\\\\Desktop\\\\ReactElandFramework\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport Tool from \"./Tool\";\n\nvar Carrier = /*#__PURE__*/function () {\n  // start 模式 0 : call 1 : sub\n  // 请求唯一标识\n  // 以下参数在 NetApi.netmode 为 0(http) 模式时才有效\n  function Carrier(_api, _pame) {\n    _classCallCheck(this, Carrier);\n\n    this.api = null;\n    this.pame = null;\n    this.errorHandle = null;\n    this.succHandle = null;\n    this.mode = 0;\n    this.isStart = false;\n    this.uuid = null;\n    this.inter = null;\n    this.interTimes = 5000;\n    this.pollsize = 0;\n    this.pollHandle = null;\n    this.uuid = Tool.uuid();\n    this.mode = 0;\n    this.interTimes = 5000;\n    this.isStart = false;\n    this.api = _api;\n    this.pame = _pame;\n  }\n\n  _createClass(Carrier, [{\n    key: \"onerror\",\n    value: function onerror(handle) {\n      this.errorHandle = handle;\n      return this;\n    }\n  }, {\n    key: \"onsuccess\",\n    value: function onsuccess(handle) {\n      this.succHandle = handle;\n      return this;\n    }\n  }, {\n    key: \"onpoll\",\n    value: function onpoll(handle) {\n      this.pollHandle = handle;\n      return this;\n    }\n  }, {\n    key: \"setmode\",\n    value: function setmode() {\n      var _mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      this.mode = _mode;\n      return this;\n    }\n  }, {\n    key: \"setpolltimes\",\n    value: function setpolltimes() {\n      var times = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5000;\n      this.interTimes = times;\n      return this;\n    }\n  }, {\n    key: \"uppollsize\",\n    value: function uppollsize() {\n      return ++this.pollsize;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (this.isStart) {\n        return this;\n      } else {\n        this.isStart = true;\n        NetApi.run(this);\n        return this;\n      }\n    }\n  }]);\n\n  return Carrier;\n}();\n\nvar NetApi = /*#__PURE__*/function () {\n  function NetApi() {\n    _classCallCheck(this, NetApi);\n  }\n\n  _createClass(NetApi, null, [{\n    key: \"create\",\n    // 0 : http mode 1: wss mode\n    // 以下两个队列只对 wss 模式有效\n    // 呼叫队列\n    // 订阅队列\n    value: function create(_monitor) {\n      this.monitor = Object.assign(this.monitor, _monitor);\n\n      if (this.wsocke instanceof WebSocket) {\n        this.wsocke.close();\n      }\n\n      this.wsocke = null;\n      this.netmode = 0; // http 模式\n\n      this.callqueue = [];\n      this.subqueue = [];\n      return this;\n    }\n  }, {\n    key: \"httpmode\",\n    value: function httpmode() {\n      this.netmode = 0; // http 模式\n\n      return this;\n    }\n  }, {\n    key: \"wssmode\",\n    value: function wssmode() {\n      var _this = this;\n\n      var pame = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        address: null,\n        onopen: null,\n        onmessage: null,\n        onclose: null,\n        onerror: null\n      };\n\n      var _wsocke = new WebSocket(pame.address);\n\n      _wsocke.onopen = function () {\n        // 连接建立\n        _this.wsocke = _wsocke;\n        _this.netmode = 1; // wss 模式\n\n        if (pame.onopen) {\n          pame.onopen();\n        }\n      };\n\n      _wsocke.onmessage = function (obj) {\n        // 消息推送\n        var data = JSON.parse(obj.data);\n\n        if (_this.monitor.onwssresult) {\n          data = _this.monitor.onwssresult(data) || data;\n        }\n\n        if (pame.onmessage) {\n          pame.onmessage(data);\n        }\n\n        _this.callqueue = _this.callqueue.filter(function (item, key) {\n          // 呼叫队列\n          if (item instanceof Carrier && item.api === data.command) {\n            if (item.succHandle) {\n              item.succHandle(data.data);\n            }\n\n            return false;\n          }\n\n          return true;\n        });\n\n        _this.subqueue.map(function (item, key) {\n          // 订阅队列\n          if (item instanceof Carrier && item.api === data.command) {\n            if (item.succHandle) {\n              item.succHandle(data.data);\n            }\n          }\n\n          return item;\n        });\n\n        console.log('web socket onmessage', data);\n      };\n\n      _wsocke.onclose = function () {\n        // 连接关闭\n        _this.netmode = 0;\n\n        _this.callqueue.map(function (item, key) {\n          if (item instanceof Carrier) {\n            if (item.errorHandle) {\n              item.errorHandle({\n                message: 'wss close'\n              });\n            }\n          }\n\n          return item;\n        });\n\n        _this.callqueue = [];\n\n        if (pame.onclose) {\n          pame.onclose();\n        }\n\n        console.log('web socket connect close');\n      };\n\n      _wsocke.onerror = function (e) {\n        // 连接失败\n        _this.netmode = 0;\n\n        _this.callqueue.map(function (item, key) {\n          if (item instanceof Carrier) {\n            if (item.errorHandle) {\n              item.errorHandle(e);\n            }\n          }\n\n          return item;\n        });\n\n        _this.callqueue = [];\n\n        if (pame.onerror) {\n          pame.onerror(e);\n        }\n\n        console.log('web socket error', e);\n      };\n\n      return this;\n    }\n  }, {\n    key: \"call\",\n    value: function call(api, pame, succHandle, errorHandle) {\n      var _carr = new Carrier(api, pame).onsuccess(succHandle).onerror(errorHandle).setmode(0);\n\n      if (this.netmode === 1) {\n        // 只有wss模式才推送入队列\n        this.callqueue.push(_carr);\n      }\n\n      _carr.start();\n\n      return _carr;\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(api, pame, succHandle, errorHandle, pollHandle) {\n      var times = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 5000;\n\n      // 最后两个参数在 http 模式下有效\n      var _carr = new Carrier(api, pame).onsuccess(succHandle).onerror(errorHandle).onpoll(pollHandle).setpolltimes(times).setmode(1);\n\n      if (this.netmode === 1) {\n        // 只有wss模式才推送入队列\n        this.subqueue.push(_carr);\n      }\n\n      _carr.start();\n\n      return _carr;\n    }\n  }, {\n    key: \"post\",\n    value: function post(carrier) {\n      var _this2 = this;\n\n      // http 请求\n      if (this.monitor.onhttppre) {\n        // 预处理\n        carrier = this.monitor.onhttppre(carrier) || carrier;\n      }\n\n      if (carrier instanceof Carrier) {\n        Tool.postRequestXML(carrier.api, carrier.pame, function (data) {\n          var _result = data;\n\n          if (_this2.monitor.onhttpresult) {\n            _result = _this2.monitor.onhttpresult(carrier, data) || data;\n          }\n\n          if (carrier.succHandle) {\n            carrier.succHandle(_result);\n          }\n        }, function (err) {\n          if (carrier.errorHandle) {\n            carrier.errorHandle(err);\n          }\n        });\n      } else {\n        console.error('net api post error for carrier illegal');\n      }\n    }\n  }, {\n    key: \"send\",\n    value: function send(carrier) {\n      // wss 请求\n      if (this.monitor.onwsspre) {\n        // 预处理\n        carrier = this.monitor.onwsspre(carrier) || carrier;\n      }\n\n      if (carrier instanceof Carrier && this.wsocke instanceof WebSocket) {\n        try {\n          this.wsocke.send(JSON.stringify({\n            command: carrier.api,\n            data: carrier.pame\n          }));\n          return true;\n        } catch (e) {\n          return false;\n        }\n      } else {\n        console.error('net api send error for carrier or wsocke illegal');\n        return false;\n      }\n    }\n  }, {\n    key: \"submithtp\",\n    value: function submithtp(carrier) {\n      var _this3 = this;\n\n      if (carrier instanceof Carrier) {\n        if (carrier.mode === 0) {\n          // call 呼叫\n          this.post(carrier);\n        } else {\n          // sub 订阅\n          carrier.inter = window.setInterval(function () {\n            var _size = carrier.uppollsize();\n\n            if (carrier.pollHandle && carrier.pollHandle(_size) === false) {\n              // 轮询前确认\n              window.clearInterval(carrier.inter);\n            } else {\n              // 确认可执行\n              _this3.post(carrier);\n            }\n          }, carrier.interTimes);\n        }\n      } else {\n        console.error('net api submithtp error for carrier illegal');\n      }\n    }\n  }, {\n    key: \"submitwss\",\n    value: function submitwss(carrier) {\n      var _this4 = this;\n\n      if (this.monitor.onwsspre) {\n        // 预处理\n        carrier = this.monitor.onwsspre(carrier) || carrier;\n      }\n\n      if (carrier instanceof Carrier) {\n        var _remove = function _remove() {\n          // send 失败则从 呼叫队列 中移除\n          if (carrier.mode === 0) {\n            // call 呼叫\n            _this4.callqueue = _this4.callqueue.filter(function (item, key) {\n              if (item instanceof Carrier && item.uuid === carrier.uuid) {\n                return false;\n              }\n\n              return true;\n            });\n          } else {// sub 订阅\n          }\n        };\n\n        if (this.wsocke instanceof WebSocket) {\n          // 对象已建立\n          try {\n            this.wsocke.send(JSON.stringify({\n              command: carrier.api,\n              data: carrier.pame\n            }));\n          } catch (e) {\n            if (carrier.errorHandle) {\n              carrier.errorHandle(e);\n            }\n\n            _remove();\n          }\n        } else {\n          if (carrier.errorHandle) {\n            carrier.errorHandle({\n              message: 'websocket not connected'\n            });\n          }\n\n          _remove();\n        }\n      } else {\n        console.error('net api submitwss error for carrier illegal');\n      }\n    }\n  }, {\n    key: \"run\",\n    value: function run(carrier) {\n      if (carrier instanceof Carrier) {\n        if (this.netmode === 0) {\n          // http 模式\n          this.submithtp(carrier);\n        } else {\n          // wss 模式\n          this.submitwss(carrier);\n        }\n      } else {\n        console.error('net api run error for carrier illegal');\n      }\n    }\n  }]);\n\n  return NetApi;\n}();\n\nNetApi.netmode = 0;\nNetApi.wsocke = null;\nNetApi.callqueue = [];\nNetApi.subqueue = [];\nNetApi.monitor = {\n  // 可对所有请求 预处理 以及 结果处理\n  onhttppre: null,\n  // http 请求前处理\n  onhttpresult: null,\n  // http 请求结果处理\n  onwsspre: null,\n  // wss 请求前处理\n  onwssresult: null // wss 推送处理\n\n};\nexport default NetApi;","map":{"version":3,"sources":["C:/Users/elandtong/Desktop/ReactElandFramework/src/utils/NetApi.js"],"names":["Tool","Carrier","_api","_pame","api","pame","errorHandle","succHandle","mode","isStart","uuid","inter","interTimes","pollsize","pollHandle","handle","_mode","times","NetApi","run","_monitor","monitor","Object","assign","wsocke","WebSocket","close","netmode","callqueue","subqueue","address","onopen","onmessage","onclose","onerror","_wsocke","obj","data","JSON","parse","onwssresult","filter","item","key","command","map","console","log","message","e","_carr","onsuccess","setmode","push","start","onpoll","setpolltimes","carrier","onhttppre","postRequestXML","_result","onhttpresult","err","error","onwsspre","send","stringify","post","window","setInterval","_size","uppollsize","clearInterval","_remove","submithtp","submitwss"],"mappings":"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","sourcesContent":["import Tool from \"./Tool\"\r\n\r\nclass Carrier {\r\n    api = null\r\n\r\n    pame = null\r\n\r\n    errorHandle = null\r\n\r\n    succHandle = null\r\n\r\n    mode = 0 // start 模式 0 : call 1 : sub\r\n\r\n    isStart = false\r\n\r\n    uuid = null // 请求唯一标识\r\n\r\n    // 以下参数在 NetApi.netmode 为 0(http) 模式时才有效\r\n    inter = null\r\n\r\n    interTimes = 5000\r\n\r\n    pollsize = 0\r\n\r\n    pollHandle = null\r\n\r\n    constructor(_api, _pame) {\r\n        this.uuid = Tool.uuid()\r\n\r\n        this.mode = 0\r\n\r\n        this.interTimes = 5000\r\n\r\n        this.isStart = false\r\n\r\n        this.api = _api\r\n\r\n        this.pame = _pame\r\n    }\r\n\r\n    onerror(handle) {\r\n        this.errorHandle = handle\r\n        return this\r\n    }\r\n\r\n    onsuccess(handle) {\r\n        this.succHandle = handle\r\n        return this\r\n    }\r\n\r\n    onpoll(handle) {\r\n        this.pollHandle = handle\r\n        return this\r\n    }\r\n\r\n    setmode(_mode = 0) {\r\n        this.mode = _mode\r\n        return this\r\n    }\r\n\r\n    setpolltimes(times = 5000) {\r\n        this.interTimes = times\r\n        return this\r\n    }\r\n\r\n    uppollsize() {\r\n        return ++this.pollsize\r\n    }\r\n\r\n    start() {\r\n        if (this.isStart) {\r\n            return this\r\n        } else {\r\n            this.isStart = true\r\n\r\n            NetApi.run(this)\r\n\r\n            return this\r\n        }\r\n    }\r\n}\r\n\r\nclass NetApi {\r\n    static netmode = 0 // 0 : http mode 1: wss mode\r\n\r\n    static wsocke = null\r\n\r\n    // 以下两个队列只对 wss 模式有效\r\n    static callqueue = [] // 呼叫队列\r\n\r\n    static subqueue = [] // 订阅队列\r\n\r\n    static monitor = { // 可对所有请求 预处理 以及 结果处理\r\n        onhttppre: null, // http 请求前处理\r\n        onhttpresult: null, // http 请求结果处理\r\n        onwsspre: null, // wss 请求前处理\r\n        onwssresult: null // wss 推送处理\r\n    }\r\n\r\n    static create(_monitor) {\r\n        this.monitor = Object.assign(this.monitor, _monitor)\r\n\r\n        if (this.wsocke instanceof WebSocket) {\r\n            this.wsocke.close()\r\n        }\r\n\r\n        this.wsocke = null\r\n\r\n        this.netmode = 0 // http 模式\r\n\r\n        this.callqueue = []\r\n\r\n        this.subqueue = []\r\n\r\n        return this\r\n    }\r\n\r\n    static httpmode() {\r\n        this.netmode = 0 // http 模式\r\n\r\n        return this\r\n    }\r\n\r\n    static wssmode(pame = {\r\n        address: null,\r\n        onopen: null,\r\n        onmessage: null,\r\n        onclose: null,\r\n        onerror: null\r\n    }) {\r\n        let _wsocke = new WebSocket(pame.address)\r\n\r\n        _wsocke.onopen = () => { // 连接建立\r\n            this.wsocke = _wsocke\r\n\r\n            this.netmode = 1 // wss 模式\r\n\r\n            if (pame.onopen) {\r\n                pame.onopen()\r\n            }\r\n        }\r\n\r\n        _wsocke.onmessage = (obj) => { // 消息推送\r\n            let data = JSON.parse(obj.data)\r\n\r\n            if (this.monitor.onwssresult) {\r\n                data = this.monitor.onwssresult(data) || data\r\n            }\r\n\r\n            if (pame.onmessage) {\r\n                pame.onmessage(data)\r\n            }\r\n\r\n            this.callqueue = this.callqueue.filter((item, key) => { // 呼叫队列\r\n                if (item instanceof Carrier && item.api === data.command) {\r\n                    if (item.succHandle) {\r\n                        item.succHandle(data.data)\r\n                    }\r\n\r\n                    return false\r\n                }\r\n\r\n                return true\r\n            })\r\n\r\n            this.subqueue.map((item, key) => { // 订阅队列\r\n                if (item instanceof Carrier && item.api === data.command) {\r\n                    if (item.succHandle) {\r\n                        item.succHandle(data.data)\r\n                    }\r\n                }\r\n\r\n                return item\r\n            })\r\n\r\n            console.log('web socket onmessage', data)\r\n        }\r\n\r\n        _wsocke.onclose = () => { // 连接关闭\r\n            this.netmode = 0\r\n\r\n            this.callqueue.map((item, key) => {\r\n                if (item instanceof Carrier) {\r\n                    if (item.errorHandle) {\r\n                        item.errorHandle({ message: 'wss close' })\r\n                    }\r\n                }\r\n                return item\r\n            })\r\n\r\n            this.callqueue = []\r\n\r\n            if (pame.onclose) {\r\n                pame.onclose()\r\n            }\r\n\r\n            console.log('web socket connect close')\r\n        }\r\n\r\n        _wsocke.onerror = (e) => { // 连接失败\r\n            this.netmode = 0\r\n\r\n            this.callqueue.map((item, key) => {\r\n                if (item instanceof Carrier) {\r\n                    if (item.errorHandle) {\r\n                        item.errorHandle(e)\r\n                    }\r\n                }\r\n                return item\r\n            })\r\n\r\n            this.callqueue = []\r\n\r\n            if (pame.onerror) {\r\n                pame.onerror(e)\r\n            }\r\n\r\n            console.log('web socket error', e)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    static call(api, pame, succHandle, errorHandle) {\r\n        let _carr = new Carrier(api, pame)\r\n            .onsuccess(succHandle)\r\n            .onerror(errorHandle)\r\n            .setmode(0)\r\n\r\n        if (this.netmode === 1) { // 只有wss模式才推送入队列\r\n            this.callqueue.push(_carr)\r\n        }\r\n\r\n        _carr.start()\r\n\r\n        return _carr\r\n    }\r\n\r\n    static sub(api, pame, succHandle, errorHandle, pollHandle, times = 5000) { // 最后两个参数在 http 模式下有效\r\n        let _carr = new Carrier(api, pame)\r\n            .onsuccess(succHandle)\r\n            .onerror(errorHandle)\r\n            .onpoll(pollHandle)\r\n            .setpolltimes(times)\r\n            .setmode(1)\r\n\r\n        if (this.netmode === 1) { // 只有wss模式才推送入队列\r\n            this.subqueue.push(_carr)\r\n        }\r\n\r\n        _carr.start()\r\n\r\n        return _carr\r\n    }\r\n\r\n    static post(carrier) { // http 请求\r\n        if (this.monitor.onhttppre) { // 预处理\r\n            carrier = this.monitor.onhttppre(carrier) || carrier\r\n        }\r\n\r\n        if (carrier instanceof Carrier) {\r\n            Tool.postRequestXML(carrier.api, carrier.pame, (data) => {\r\n                let _result = data\r\n\r\n                if (this.monitor.onhttpresult) {\r\n                    _result = this.monitor.onhttpresult(carrier, data) || data\r\n                }\r\n\r\n                if (carrier.succHandle) {\r\n                    carrier.succHandle(_result)\r\n                }\r\n            }, (err) => {\r\n                if (carrier.errorHandle) {\r\n                    carrier.errorHandle(err)\r\n                }\r\n            })\r\n        } else {\r\n            console.error('net api post error for carrier illegal')\r\n        }\r\n    }\r\n\r\n    static send(carrier) { // wss 请求\r\n        if (this.monitor.onwsspre) { // 预处理\r\n            carrier = this.monitor.onwsspre(carrier) || carrier\r\n        }\r\n\r\n        if (carrier instanceof Carrier && this.wsocke instanceof WebSocket) {\r\n            try {\r\n                this.wsocke.send(JSON.stringify({\r\n                    command: carrier.api,\r\n                    data: carrier.pame\r\n                }))\r\n                return true\r\n            } catch (e) {\r\n                return false\r\n            }\r\n        } else {\r\n            console.error('net api send error for carrier or wsocke illegal')\r\n\r\n            return false\r\n        }\r\n    }\r\n\r\n    static submithtp(carrier) {\r\n        if (carrier instanceof Carrier) {\r\n            if (carrier.mode === 0) { // call 呼叫\r\n                this.post(carrier)\r\n            } else { // sub 订阅\r\n                carrier.inter = window.setInterval(() => {\r\n                    let _size = carrier.uppollsize()\r\n\r\n                    if (carrier.pollHandle && carrier.pollHandle(_size) === false) { // 轮询前确认\r\n                        window.clearInterval(carrier.inter)\r\n                    } else { // 确认可执行\r\n                        this.post(carrier)\r\n                    }\r\n                }, carrier.interTimes)\r\n            }\r\n        } else {\r\n            console.error('net api submithtp error for carrier illegal')\r\n        }\r\n    }\r\n\r\n    static submitwss(carrier) {\r\n        if (this.monitor.onwsspre) { // 预处理\r\n            carrier = this.monitor.onwsspre(carrier) || carrier\r\n        }\r\n\r\n        if (carrier instanceof Carrier) {\r\n            let _remove = () => { // send 失败则从 呼叫队列 中移除\r\n                if (carrier.mode === 0) { // call 呼叫\r\n                    this.callqueue = this.callqueue.filter((item, key) => {\r\n                        if (item instanceof Carrier && item.uuid === carrier.uuid) {\r\n                            return false\r\n                        }\r\n\r\n                        return true\r\n                    })\r\n                } else { // sub 订阅\r\n                }\r\n            }\r\n\r\n            if (this.wsocke instanceof WebSocket) {  // 对象已建立\r\n                try {\r\n                    this.wsocke.send(JSON.stringify({\r\n                        command: carrier.api,\r\n                        data: carrier.pame\r\n                    }))\r\n                } catch (e) {\r\n                    if (carrier.errorHandle) {\r\n                        carrier.errorHandle(e)\r\n                    }\r\n\r\n                    _remove()\r\n                }\r\n            } else {\r\n                if (carrier.errorHandle) {\r\n                    carrier.errorHandle({ message: 'websocket not connected' })\r\n                }\r\n\r\n                _remove()\r\n            }\r\n        } else {\r\n            console.error('net api submitwss error for carrier illegal')\r\n        }\r\n    }\r\n\r\n    static run(carrier) {\r\n        if (carrier instanceof Carrier) {\r\n            if (this.netmode === 0) { // http 模式\r\n                this.submithtp(carrier)\r\n            } else { // wss 模式\r\n                this.submitwss(carrier)\r\n            }\r\n        } else {\r\n            console.error('net api run error for carrier illegal')\r\n        }\r\n    }\r\n}\r\n\r\nexport default NetApi\r\n"]},"metadata":{},"sourceType":"module"}